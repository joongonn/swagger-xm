{
    "swagger": "2.0",
    "info": {
        "description": "xMatters ReST API",
        "title": "xMatters ReST API",
        "version": "1"
    },
    "basePath": "/api/xm/1",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "List Countries",
                "description": "Returns a list of countries that are configured for the system.",
                "operationId": "getCountries",
                "parameters": [
                    {
                        "name": "used",
                        "in": "query",
                        "description": "Query parameter to only display countries that are in use. Valid values: 'true' or 'false'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(Country)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/devices": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Create a device.",
                "description": "Adds a device to xMatters and returns a Device object that represents the newly-created device.\nProvide fields in the request body that are common to all devices as well as fields that are specific to the type of device you want to create, for example, include the `emailAddress` field when creating email devices and include the `phoneNumber` field for phone, text (SMS), or public address devices.\nMobile app devices such as iPhone, iPad, Android phone, and BlackBerry phone devices cannot be created using the xMatters REST API. These devices are added to a user's profile automatically after they install the mobile app on their device and use it to log on to xMatters for the first time. However, once a mobile app device has been added to a user's profile it may be modified with Modify a device.\n",
                "operationId": "postDevice",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "An object that contains the definition of the new device",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DevicePost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/devices/{deviceId}": {
            "get": {
                "tags": [
                    "Devices"
                ],
                "summary": "Get a device.",
                "description": "Returns information about a device in a Device object.\nTo use this method, you must know the unique identifier of the device. You can obtain this identifier from the response of Create a device or Get a person's devices.\n",
                "operationId": "getDevice",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-deviceId"
                    },
                    {
                        "$ref": "#/parameters/query-embed-getDevice"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Devices"
                ],
                "summary": "Deletes a device.",
                "description": "To use this method, you must know the unique identifier of the device. You can obtain this identifier from the response of Create a device or Get a person's devices.",
                "operationId": "deleteDevice",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-deviceId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "204": {
                        "$ref": "#/responses/204"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/device-names": {
            "get": {
                "tags": [
                    "Device Names"
                ],
                "summary": "Get device names",
                "description": "Returns a paginated list of the DeviceName objects that represent the devices users can add to their profile.\nYou can request devices of a specific type by including the `?deviceType` query parameter, for example, use `/device-names?deviceType=EMAIL` to retrieve a list of email devices.\n",
                "operationId": "getDeviceNames",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "query",
                        "description": "Returns devices of only the specified type. Use one of the following values:\n- \"ANDROID_PUSH\"\n- \"APPLE_PUSH\"\n- \"BLACKBERRY_PUSH\"\n- \"EMAIL\"\n- \"FAX\"\n- \"GENERIC\"\n- \"TEXT_PAGER\"\n- \"TEXT_PHONE\"\n- \"VOICE\"\n- \"VOICE_IVR\"\n\nFor more information about supported device types, see Device Types.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(DeviceName)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/device-types": {
            "get": {
                "tags": [
                    "Device Types"
                ],
                "summary": "Get device types",
                "description": "Returns a DeviceTypes object that lists the types of devices that can be configured in xMatters, such as “EMAIL”, “VOICE”, “SMS”, and so on.",
                "operationId": "getDeviceTypes",
                "parameters": [
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(DeviceType)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/feature-toggles": {
            "get": {
                "tags": [
                    "Feature Toggles"
                ],
                "summary": "List Feature Toggles",
                "description": "Returns a list of all the feature toggles for the system.",
                "operationId": "getFeatureToggles",
                "parameters": [
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(FeatureToggle)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get groups",
                "description": "Returns a list of Group objects that represent the groups in the system.\nThis endpoint returns only the groups that the authenticated user has permission to access. If search terms are provided with the request, this endpoint returns the groups that match the search criteria.\nGroups are returned as a paginated list of Group objects and are sorted in alphabetical order. For more information about working with paginated result sets, see Results Pagination.\n",
                "operationId": "getGroups",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A list of search terms separated by the + sign or a space character. Searches are case-insensitive and must contain a total of at least two characters. Searches cannot contain whitespace characters within an individual search term.\nExample: `/groups?search=admin corporate`\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    },
                    {
                        "$ref": "#/parameters/query-embed"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(Group)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Create a group",
                "description": "Creates an empty group in xMatters.\nThe response returns a Group object that represents the newly-created group. You can use this object to locate the group’s unique identifier (the `id` field). After the group has been created you can build out the shift schedule and add members to the group roster.\n\nSee also Add a shift.\n\nSee also Add a member to a shift.\n\nSee also Add a member to the group roster.\n",
                "operationId": "postGroup",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "An object that contains a description of the new group",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/groups/{groupId}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group",
                "description": "Returns a Group object that contains a representation of the group.\nYou can identify the group by using its name (`targetName`) or its unique identifier (`id`).\nTo view information about group supervisors and group observers, log on to the xMatters user interface and view the group.\n",
                "operationId": "getGroup",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group.",
                "description": "Deletes a group.\nIdentify the group using either the group name (the `targetName` field) or its unique identifier (the `id` field).\nThe response returns a Group Object that represents the recently-deleted group.\n",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "204": {
                        "$ref": "#/responses/204"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    }
                }
            }
        },
        "/groups/{groupId}/calendar": {
            "get": {
                "tags": [
                    "Group Calendar"
                ],
                "summary": "Get who is on duty\nReturns a list the group members that are currently on duty.\n\nThis method returns the start and end time of each shift that is currently active and a list of the members that are on duty. You can identify the group using either its name (`targetName`) or its unique identifier (`id`).\n\nShift start and end times are defined in universal time (UTC) format, regardless of the time zone of the authenticating user.\n",
                "description": "Returns the group members that are currently on duty.",
                "operationId": "whoIsOnDuty",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    },
                    {
                        "$ref": "#/parameters/query-embed-whoIsOnDuty"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(ShiftOccurrenceMember)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/groups/{groupId}/members": {
            "post": {
                "tags": [
                    "Group Members"
                ],
                "summary": "Add a member to the group roster.",
                "description": "Adds a member to the group without adding them to any shift.\n\nUse this endpoint when you know which group you want to add a member to but do not know which shift the member should belong to. This allows you to add users to a group with the API and then later organize them into their specific shifts. You must add the member to at least one shift before they will be able to receive notifications sent to the group.\n\nIf you know which shift a member should belong to, use `POST /groups/{groupID}/shifts/{shiftID}/members` to add the member directly to the shift so they may begin to receive notifications immediately. For more information on adding members to shifts, see Add a member to a shift.\n",
                "operationId": "postGroupMember",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Member to add",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RecipientLink"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            },
            "get": {
                "tags": [
                    "Group Members"
                ],
                "summary": "Get the group roster.",
                "description": "Returns the members that belong to a group as a Pagination of GroupMembership object.\n\nYou can optionally include information about the shifts each member belongs to by including the `?embed=shifts` query parameter in the request.\n",
                "operationId": "getGroupMembers",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    },
                    {
                        "$ref": "#/parameters/query-embed-getGroupMembers"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(GroupMember)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/groups/{groupId}/members/{memberId}": {
            "delete": {
                "tags": [
                    "Group Members"
                ],
                "summary": "Remove a member from the group roster.",
                "description": "Removes a member from a group and its corresponding shifts. Group members may be people, devices, dynamic teams, or other groups.",
                "operationId": "deleteGroupMember",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    },
                    {
                        "$ref": "#/parameters/path-memberId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    },
                    "204": {
                        "$ref": "#/responses/204"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    }
                }
            }
        },
        "/groups/{groupId}/roster": {
            "get": {
                "summary": "Returns information about the rosters of this group.",
                "description": "Unlike /groups/{groupId}/members which returns people, device, group, and dynamic group resources, this endpoint excludes the device resource from the list of returned resources. Instead, it collapses the device resource into the corresponding people resource.",
                "operationId": "getGroupRoster",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(GroupRoster)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/groups/{groupId}/shifts": {
            "post": {
                "tags": [
                    "Shifts"
                ],
                "summary": "Add a shift.",
                "description": "Adds an empty shift to a group.\n\nThe shift is configured to always be on duty (24x7) and does not contain any members.\n\nSee Add a member to a shift for more information about adding a member to a shift with the xMatters REST API. You can modify the shift in the xMatters user interface to change its duration and recurrence pattern and configure the escalation timeline.\n",
                "operationId": "postShift",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The unique identifier (`id`) or name (`targetName`) of the group to which you want to add a shift.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ShiftPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Shift"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/groups/{groupId}/shifts/{shiftId}": {
            "get": {
                "tags": [
                    "Shifts"
                ],
                "summary": "Get a shift.",
                "description": "Returns a Shift object object that represents a shift in xMatters.\n\nYou can specify a shift by its name or identifier. To locate the identifier for a group, see Get a group. You can locate the name of a group or a shift in the user interface.\n",
                "operationId": "getShift",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    },
                    {
                        "$ref": "#/parameters/path-shiftId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Shift"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/groups/{groupId}/shifts/{shiftId}/members": {
            "post": {
                "tags": [
                    "Shift Members"
                ],
                "summary": "Add a member to a shift.",
                "description": "Adds a member (group, person, or device) to a shift.\n\nYou can identify the shift and group by either its `targetName` or `id`.\n\nThis method allows you to specify how to insert the member into the escalation timeline, and whether the member rotates according to the shift rotation rules. If you do not specify a position to insert the member, it is added to the end of the escalation timeline. If the group allows duplicates you may add a member to a shift more than once.\n\nIf you would like to add a member to the group but do not know which shift to add them to, you can add them to the group roster and adjust the shift schedule later. For more information about adding members to the group roster without adding them to a shift, see Add a member to the group roster.\n",
                "operationId": "postShiftMember",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-groupId"
                    },
                    {
                        "$ref": "#/parameters/path-shiftId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Shift Member",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ShiftMemberPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ShiftMember"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/people": {
            "get": {
                "tags": [
                    "People"
                ],
                "summary": "Get people.",
                "description": "Returns a paginated list of the users that are visible to the authenticating user. Use the `embed=roles` query parameter to include a list of each user’s assigned roles in the response.\n\nYou can request a list of all users or search for users that match specific search criteria. Use the `search` query parameter to return users with matching names, user IDs, email address, or phone numbers. Use the `propertyName/propertyValue` query parameters to return users that have matching custom fields and attributes.\n",
                "operationId": "getPeople",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "A list of search terms separated by the + sign or a space. Searches are case-insensitive and must contain a total of at least two characters. Searches cannot contain whitespace characters within an individual search term. The result set includes people where any of the following fields match any of the search terms:\n- `firstName`\n- `lastName`\n- `targetName`\n- `webLogin`\n- `phoneNumber` field of one of the user’s devices\n- `emailAddress` field of one of the user’s devices\n\nExample: `GET /people?search=mary` could return the following users:\n\n- Users whose first name or last name contains “mary”; for example “Mary McBride”, “Rosemary Smith”, “George Cromary”\n- Users whose user ID contains “mary”; for example “mary.mcbride”, “tomarye21”\n- Users who own an email device whose address contains “mary”; for example “marylou@example.com”, “admin@rosemaryandsage.com”\n- Phone number fields cannot contain these characters so this search term would not match phone number devices.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "propertyName",
                        "in": "query",
                        "description": "Case senstive exact string match of custom field or custom attribute name.  Must be used with propertyValue, cannot be used with search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "propertyValue",
                        "in": "query",
                        "description": "Case senstive exact string match of custom field or custom attribute value.  Must be used with propertyName, cannot be used with search",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/query-status"
                    },
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    },
                    {
                        "$ref": "#/parameters/query-embed-getPeople"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(Person)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            },
            "post": {
                "tags": [
                    "People"
                ],
                "summary": "Create a person.",
                "description": "Creates a new user in xMatters.\n\nNewly-created users do not have assigned web or phone passwords. You can set these passwords manually in the xMatters user interface, or you can add a device to their profile which will enable them to use the “Forgot Password” work flow to resest their own password.\n\nYou must assign at least one role to a new user and you may optionally assign one or more supervisors. The supervisors must have permission to supervise users and the authenticating account must have permission to assign supervisors. If you do not assign a supervisor then the authenticating account becomes the user’s supervisor.\n\nTo assign the person to a site, you must provide the unique identifier of the site. Locating site identifiers in the xMatters user interface requires advanced permissions. For more information, see Locate the identifier for a site.\n",
                "operationId": "postPerson",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "An object that describes the new user.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PersonPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/people/{personId}": {
            "get": {
                "tags": [
                    "People"
                ],
                "summary": "Get a person.",
                "description": "Returns a Person object that represents a user in xMatters.\n\nYou can identify a person using either their user name (`targetName`) or their unique identifier (`id`). To include a list of the person’s roles in the response, use the `?embed=roles` query parameter with the request.\n",
                "operationId": "getPerson",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-personId"
                    },
                    {
                        "$ref": "#/parameters/query-embed-getPerson"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            },
            "delete": {
                "tags": [
                    "People"
                ],
                "summary": "Delete a person.",
                "description": "You can identify the person using either their user name (the `targetName` field) or their unique identifier (the `id` field).",
                "operationId": "deletePerson",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-personId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Person"
                        }
                    },
                    "204": {
                        "$ref": "#/responses/204"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/people/{personId}/devices": {
            "get": {
                "tags": [
                    "People"
                ],
                "summary": "Get a person’s devices.",
                "description": "Returns the person’s devices as a Pagination of Device object.\n\nYou can optionally include the `?embed=timeframes` query parameter to include the timeframes each device is configured to receive notifications.\n",
                "operationId": "getPersonDevices",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-personId"
                    },
                    {
                        "$ref": "#/parameters/query-embed-getPersonDevices"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(Device)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/people/{personId}/on-call-reminder-config": {
            "get": {
                "tags": [
                    "On-Call Reminders"
                ],
                "summary": "Configuration for on-call reminders",
                "description": "Configuration for on-call reminders",
                "operationId": "getPersonOnCallReminderConfig",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-personId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PersonOnCallReminderConfig"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            },
            "post": {
                "tags": [
                    "On-Call Reminders"
                ],
                "summary": "Creates configuration for on-call reminders.",
                "description": "Creates configuration for on-call reminders.",
                "operationId": "postPersonOnCallReminderConfig",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-personId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "An object that describes the configuration for on-call reminders.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OnCallReminderConfigPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PersonOnCallReminderConfig"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PersonOnCallReminderConfig"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "409": {
                        "$ref": "#/responses/409"
                    }
                }
            }
        },
        "/service-providers": {
            "get": {
                "tags": [
                    "Service Providers"
                ],
                "summary": "List Service Providers",
                "description": "Returns a list of service providers that are configured for the system.",
                "operationId": "getServiceProviders",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "query",
                        "description": "Filter results by the stated Device Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/query-offset"
                    },
                    {
                        "$ref": "#/parameters/query-limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Pagination(ServiceProvider)"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        },
        "/sites/{siteId}": {
            "get": {
                "tags": [
                    "Sites"
                ],
                "summary": "Get a site.",
                "description": "Returns a Site object that represents a site in xMatters.\n\nYou can identify a site by its name or identifier. To locate the identifier for a site in the xMatters user interface, see Locate the identifier for a site. You can access site information if you have permission to either view sites or your own devices in the xMatters user interface.\n",
                "operationId": "getSite",
                "parameters": [
                    {
                        "$ref": "#/parameters/path-siteId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Site"
                        }
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    }
                }
            }
        }
    },
    "definitions": {
        "Country": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "type": "string"
                },
                "code3": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "continent": {
                    "type": "string"
                },
                "dialingCode": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "code",
                "code3",
                "name",
                "continent",
                "dialingCode",
                "language"
            ]
        },
        "Recipient": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An identifier (UUID) that represents this resource"
                },
                "targetName": {
                    "type": "string",
                    "description": "An identifier such as a name that can be used to identify a resource"
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "PERSON",
                        "DEVICE",
                        "GROUP"
                    ]
                },
                "externalKey": {
                    "type": "string",
                    "description": "Identifies this resource in an external system. Used when externallyOwned is true."
                },
                "externallyOwned": {
                    "type": "boolean",
                    "description": "True if this resource is managed by an external system. Externally-owned resources cannot be deleted in the xMatters user interface."
                },
                "locked": {
                    "type": "array",
                    "description": "Lists the fields of externally-owned objects that are locked and cannot be modified in the xMatters user interface",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Whether the recipient is active. Inactive recipients do not receive notifications.",
                    "enum": [
                        "ACTIVE",
                        "INACTIVE"
                    ]
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "targetName",
                "recipientType",
                "externallyOwned",
                "status"
            ],
            "discriminator": "recipientType"
        },
        "Group": {
            "description": "A representation of an xMatters group.\n\nGroup objects include the fields defined in Recipient object in addition to fields specific to group recipients.\n\nTo view information about group supervisors and group observers, log on to the xMatters user interface and view the group.\n\nSee also Recipient object.\n",
            "type": "object",
            "properties": {
                "allowDuplicates": {
                    "type": "boolean",
                    "description": "True if recipients can receive more than one notification for the same event."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the group."
                },
                "observedByAll": {
                    "type": "boolean",
                    "description": "True if users can locate and send notifications to the group regardless of their role. If this value is false, only users who have the selected roles can observe the group. To view or set the list of group observer roles, log on to the xMatters user interface and edit the group."
                },
                "recipientType": {
                    "type": "string",
                    "description": "For groups, the recipient type field is \"GROUP\".",
                    "enum": [
                        "GROUP"
                    ]
                },
                "targetName": {
                    "type": "string",
                    "description": "For groups, the target name is the group name."
                },
                "site": {
                    "$ref": "#/definitions/SiteReference"
                },
                "useDefaultDevices": {
                    "type": "boolean",
                    "description": "True if group recipients may be notified on their default device when they do not have a device with an active timeframe."
                }
            },
            "required": [
                "id",
                "targetName",
                "externallyOwned"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Recipient"
                }
            ]
        },
        "GroupMember": {
            "properties": {
                "group": {
                    "$ref": "#/definitions/GroupReference"
                },
                "member": {
                    "$ref": "#/definitions/RecipientReference"
                }
            },
            "required": [
                "group",
                "member"
            ]
        },
        "GroupRoster": {
            "properties": {
                "group": {
                    "$ref": "#/definitions/GroupReference"
                },
                "member": {
                    "$ref": "#/definitions/Recipient"
                }
            },
            "required": [
                "group",
                "member"
            ]
        },
        "Person": {
            "description": "Describes a person in xMatters. A person object is a Recipient object with a recipientType of `PERSON`.\n\nA Person object contains the fields of the Recipient object as well as the fields described in the table below.\nThe Person object includes a list of the person’s roles when the `?embed=roles` query parameter is used with the request.\n\nSee also: Recipient object.\n",
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "description": "The first name of the person."
                },
                "language": {
                    "type": "string",
                    "description": "The person’s default language."
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the person."
                },
                "owner": {
                    "$ref": "#/definitions/PersonReference"
                },
                "phoneLogin": {
                    "type": "string",
                    "description": "An access code that the person can use to identify themselves when they phone in to xMatters to retrieve messages."
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "PERSON"
                    ]
                },
                "roles": {
                    "$ref": "#/definitions/Pagination(Role)"
                },
                "site": {
                    "$ref": "#/definitions/SiteReference"
                },
                "timezone": {
                    "type": "string",
                    "description": "The person’s time zone. \nExample: \"US/Eastern\"\n"
                },
                "webLogin": {
                    "type": "string",
                    "description": "The identifier the person can use to log in to the xMatters user interface. This is often identical to the `targetName` value."
                }
            },
            "required": [
                "firstName",
                "lastName"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Recipient"
                }
            ]
        },
        "onCallReminderShiftStartConfig": {
            "properties": {
                "onCallReminderShiftStartConfig": {
                    "$ref": "#/definitions/Pagination(OnCallReminderShiftStartConfig)"
                },
                "remindersEnabled": {
                    "type": "boolean",
                    "description": "True if the person wants to receive reminders, false if they do not."
                },
                "remindOnShiftEnd": {
                    "type": "boolean",
                    "description": "True if the person wants to be notified when their shift ends, false if the person does not want to be notified."
                },
                "onCallReminderDeviceConfig": {
                    "$ref": "#/definitions/Pagination(OnCallReminderDeviceConfig)"
                }
            }
        },
        "PersonOnCallReminderConfig": {
            "properties": {
                "remindersEnabled": {
                    "type": "boolean",
                    "description": "True if the person wants to receive reminders, false if they do not."
                },
                "remindOnShiftEnd": {
                    "type": "boolean",
                    "description": "True if the person wants to be notified when their shift ends, false if the person does not want to be notified."
                },
                "onCallReminderDeviceConfig": {
                    "$ref": "#/definitions/Pagination(OnCallReminderDeviceConfig)"
                },
                "onCallReminderShiftStartConfig": {
                    "$ref": "#/definitions/Pagination(OnCallReminderShiftStartConfig)"
                }
            }
        },
        "OnCallReminderShiftStartConfig": {
            "properties": {
                "remindTimeBeforeShiftStartInMinutes": {
                    "type": "integer",
                    "description": "The time in minutes to receive a reminder before a shift start."
                }
            },
            "required": [
                "remindTimeBeforeShiftStartInMinutes"
            ]
        },
        "OnCallReminderDeviceConfig": {
            "properties": {
                "device": {
                    "$ref": "#/definitions/DeviceReference"
                }
            },
            "required": [
                "device"
            ]
        },
        "DeviceType": {
            "type": "string",
            "description": "The type of device.",
            "enum": [
                "ANDROID_PUSH",
                "APPLE_PUSH",
                "BLACKBERRY_PUSH",
                "BROWSER",
                "EMAIL",
                "FAX",
                "GENERIC",
                "IM",
                "NUMERIC_PAGER",
                "TEXT_PAGER",
                "TEXT_PHONE",
                "VOICE",
                "VOICE_IVR"
            ]
        },
        "DeviceName": {
            "type": "object",
            "description": "The name, description, and type of a device.",
            "properties": {
                "deviceType": {
                    "$ref": "#/definitions/DeviceType"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device. These values are customized for your system but typical examples are listed below:\n- \"Work Email\"\n- \"Home Email\"\n- \"Mobile Phone\"\n- \"Pager\"\n- \"Fax\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the device."
                },
                "domains": {
                    "type": "array",
                    "description": "Used only with email devices. Lists the domains included in the email domain whitelist for this type of device.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "deviceType",
                "name",
                "description"
            ]
        },
        "Device": {
            "description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts.",
            "type": "object",
            "properties": {
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "DEVICE"
                    ]
                },
                "deviceType": {
                    "$ref": "#/definitions/DeviceType"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device. Example: Work Email, Home Phone."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the device."
                },
                "owner": {
                    "$ref": "#/definitions/PersonReference"
                },
                "defaultDevice": {
                    "type": "boolean",
                    "description": "True if this device can receive notifications when the user has no active devices."
                },
                "delay": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of minutes to wait for a response before contacting the next device."
                },
                "priorityThreshold": {
                    "type": "string",
                    "description": "The minimum priority of an event for it to be delivered to this device.",
                    "enum": [
                        "LOW",
                        "HIGH",
                        "MEDIUM"
                    ]
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The order in which the device will be contacted, where 0 represents the first device contacted."
                },
                "testStatus": {
                    "type": "string",
                    "description": "Whether the device has been tested.",
                    "enum": [
                        "TESTED",
                        "UNTESTED",
                        "PENDING",
                        "INVALID"
                    ]
                },
                "timeframes": {
                    "description": "The time frames in which the device is available to receive notifications",
                    "$ref": "#/definitions/Pagination(DeviceTimeframe)"
                },
                "provider": {
                    "$ref": "#/definitions/ProviderReference"
                }
            },
            "required": [
                "owner",
                "deviceType"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Recipient"
                }
            ],
            "discriminator": "deviceType"
        },
        "EmailDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "EMAIL"
                    ]
                },
                "emailAddress": {
                    "type": "string",
                    "description": "The email address of the device.\nExample: someone@example.com\n"
                }
            },
            "required": [
                "emailAddress"
            ]
        },
        "VoiceDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "VOICE"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Phone numbers must begin with the + sign and include the country code (E.164 format).\nExamples:\n- +19295551212\n- +441632960577\n"
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "SMSDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "TEXT_PHONE"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "Phone numbers must begin with the + sign and include the country code (E.164 format).\nExamples:\n- +19295551212\n- +441632960577\n"
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "TextPagerDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "TEXT_PAGER"
                    ]
                },
                "pin": {
                    "type": "string",
                    "description": "The PIN code of the pager."
                },
                "twoWayDevice": {
                    "type": "boolean",
                    "description": "True if the device is able to send and receive messages. False if the device is only able to receive messages."
                }
            },
            "required": [
                "pin",
                "twoWayDevice"
            ]
        },
        "NumericPagerDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "NUMERIC_PAGER"
                    ]
                },
                "pagerNumber": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "areaCode": {
                    "type": "string"
                },
                "pin": {
                    "type": "string"
                }
            }
        },
        "IMDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "IM"
                    ]
                },
                "address": {
                    "type": "string"
                }
            },
            "required": [
                "address"
            ]
        },
        "ApplePushDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "APPLE_PUSH"
                    ]
                },
                "accountId": {
                    "type": "string"
                },
                "apnToken": {
                    "type": "string"
                },
                "alertSound": {
                    "type": "string"
                },
                "soundStatus": {
                    "type": "string"
                },
                "soundThreshold": {
                    "type": "string",
                    "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH"
                    ]
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "apnToken"
            ]
        },
        "AndroidPushDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "ANDROID_PUSH"
                    ]
                },
                "accountId": {
                    "type": "string"
                },
                "registrationId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "registrationId"
            ]
        },
        "BlackberryPushDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "BLACKBERRY_PUSH"
                    ]
                },
                "accountId": {
                    "type": "string"
                },
                "registrationId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "registrationId"
            ]
        },
        "FaxDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "FAX"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "The phone number of the fax device, not including the country code. The phone number must be between 5 and 20 characters long. \nExamples for USA (country = “US”):\n- 4035551919\n- 7025559820\nNote: The phone number format used for fax is different than the phone number format used for voice, public address, and SMS devices. Fax numbers must conform to the following regular expression: `\"^d{5, 20}$\"`\n",
                    "pattern": "^\\d{5,20}$"
                },
                "country": {
                    "type": "string",
                    "description": "The country code of the fax device. Valid country codes include the following:\n- \"AR\"\n- \"AU\"\n- \"BR\"\n- \"CA\"\n- \"FR\"\n- \"DE\"\n- \"HK\"\n- \"IN\"\n- \"IT\"\n- \"JP\"\n- \"PT\"\n- \"PR\"\n- \"GB\"\n- \"US\"\n",
                    "enum": [
                        "AR",
                        "AU",
                        "BR",
                        "CA",
                        "FR",
                        "DE",
                        "HK",
                        "IN",
                        "IT",
                        "JP",
                        "PT",
                        "PR",
                        "GB",
                        "US"
                    ]
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "PublicAddressDevice": {
            "description": "a.k.a. Voice IVR",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "VOICE_IVR"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "E.164 international format phone number including +, country code, and extension"
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "GenericDevice": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/Device"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "GENERIC"
                    ]
                },
                "pin": {
                    "type": "string"
                }
            }
        },
        "DeviceTimeframe": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Timeframe. Example: \"After hours\"."
                },
                "startTime": {
                    "type": "string",
                    "description": "The time of day that the timeframe begins. HH:mm"
                },
                "timezone": {
                    "type": "string"
                },
                "durationInMinutes": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The length of the timeframe in minutes."
                },
                "excludeHolidays": {
                    "type": "boolean",
                    "description": "True if the timeframe is not active on holidays."
                },
                "days": {
                    "type": "array",
                    "description": "List of the days of the week this timeframe is active.",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SU",
                            "MO",
                            "TU",
                            "WE",
                            "TH",
                            "FR",
                            "SA"
                        ]
                    }
                }
            },
            "required": [
                "name",
                "startTime",
                "durationInMinutes",
                "excludeHolidays"
            ]
        },
        "FeatureToggle": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "value"
            ]
        },
        "ServiceProvider": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Shift": {
            "description": "Describes a shift, including its name, ID, and the group to which it belongs.",
            "properties": {
                "group": {
                    "$ref": "#/definitions/GroupReference"
                },
                "id": {
                    "description": "A unique identifier that represents the shift.",
                    "type": "string"
                },
                "name": {
                    "description": "The target name of the shift.",
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            }
        },
        "ShiftMember": {
            "description": "Defines how a person, group, or device belongs to a shift. This includes the position of the member in the shift, whether this position rotates according to the shift rotation rules, and information about any escalation that immediately precedes the member’s position in the shift.\n\nIf there is an escalation immediately preceding the shift member the `delay` and `escalationType` values describe this escalation. If the shift member does not immediately follow an escalation then the delay value is 0 and the `escalationType` value is None.\n",
            "properties": {
                "shift": {
                    "$ref": "#/definitions/ShiftReference"
                },
                "recipient": {
                    "$ref": "#/definitions/RecipientReference"
                },
                "position": {
                    "description": "The position of the member in the shift.",
                    "type": "integer"
                },
                "delay": {
                    "description": "The number of minutes to wait before escalating the notification to this shift member. Shift members that do not immediately follow an escalation have a delay value of 0.",
                    "type": "integer"
                },
                "escalationType": {
                    "description": "This value describes the category of a preceding escalation. This field has one of the following values:\n\n- \"None\"\n- \"Peer\"\n- \"Management\"\n\nShift members that do not immediately follow an escalation delay have a escalationType value of \"None\" and a delay of 0. The value None may also represent an escalation delay that is not categorized.\n",
                    "type": "string",
                    "enum": [
                        "None",
                        "Peer",
                        "Management"
                    ]
                },
                "inRotation": {
                    "description": "This value is true if the shift member’s position rotates according to the shift’s rotation rules. This value is false if the shift member stays in the same position when the shift rotates.",
                    "type": "boolean"
                }
            },
            "required": [
                "shift",
                "recipient",
                "position",
                "delay",
                "escalationType",
                "inRotation"
            ]
        },
        "ShiftOccurrence": {
            "description": "This object defines a reference to a shift. If it is returned from a call to GET /calendar with `?embed=shift` it includes extra information about the shift such as its name and a reference to the group it belongs to.",
            "properties": {
                "start": {
                    "description": "The start time of the shift in UTC format.",
                    "type": "string",
                    "format": "date-time"
                },
                "end": {
                    "description": "The end time of the shift in UTC format.",
                    "type": "string",
                    "format": "date-time"
                },
                "shift": {
                    "$ref": "#/definitions/ShiftReference"
                },
                "members": {
                    "$ref": "#/definitions/Pagination(ShiftOccurrenceMember)"
                }
            },
            "required": [
                "shift",
                "start",
                "end"
            ]
        },
        "ShiftOccurrenceMember": {
            "properties": {
                "position": {
                    "description": "The position of the member in the escalation timeline, where 1 represents the first person in the timeline.",
                    "type": "integer"
                },
                "delay": {
                    "description": "The number of minutes to wait after notifying this shift member before notifying the next shift member.",
                    "type": "integer"
                },
                "member": {
                    "$ref": "#/definitions/Recipient"
                }
            },
            "required": [
                "member",
                "position",
                "delay"
            ]
        },
        "Site": {
            "properties": {
                "id": {
                    "description": "A unique identifier that represents this site.",
                    "type": "string"
                },
                "name": {
                    "description": "The name that is used to identify this site within xMatters.",
                    "type": "string"
                },
                "address1": {
                    "description": "The first line of the site address.",
                    "type": "string"
                },
                "address2": {
                    "description": "The second line of the site address.",
                    "type": "string"
                },
                "city": {
                    "description": "The city in which the site is located.",
                    "type": "string"
                },
                "country": {
                    "description": "The country in which the site is located.",
                    "type": "string"
                },
                "externalKey": {
                    "type": "string"
                },
                "externallyOwned": {
                    "type": "boolean"
                },
                "language": {
                    "description": "The default language used by this site.",
                    "type": "string"
                },
                "latitude": {
                    "description": "The latitude of the site’s physical location.",
                    "type": "number",
                    "format": "double"
                },
                "longitude": {
                    "description": "The longitude of the site’s physical location.",
                    "type": "number",
                    "format": "double"
                },
                "postalCode": {
                    "description": "The ZIP or postal code for the site.",
                    "type": "string"
                },
                "state": {
                    "description": "The region, state or province in which the site is located.",
                    "type": "string"
                },
                "status": {
                    "description": "Whether the site is active. Users assigned to inactive sites cannot log in to xMatters or receive notifications. Use one of the following values:\n- \"ACTIVE\"\n- \"INACTIVE\"\n",
                    "type": "string",
                    "enum": [
                        "ACTIVE",
                        "INACTIVE"
                    ]
                },
                "timezone": {
                    "description": "The default time zone of the site.\nExample: \"US/Pacific\"\n",
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "name"
            ]
        },
        "ShiftPost": {
            "properties": {
                "name": {
                    "description": "The name of the shift.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "ShiftMemberPost": {
            "properties": {
                "recipient": {
                    "$ref": "#/definitions/RecipientLink"
                },
                "position": {
                    "description": "The position of the recipient in the shift. The value 1 represents the first member of the shift. If this value is not specified (or is larger than the total number of shift members) the member is added to the end of the shift.",
                    "type": "integer"
                },
                "delay": {
                    "description": "The number of minutes to wait before escalating a notification to this member. Using a non-zero value for the delay causes xMatters to create an escalation before the shift member. Use the `escalationType` field to specify the category of this escalation.",
                    "type": "integer"
                },
                "escalationType": {
                    "description": "The category of the escalation that precedes the shift member. Use one of the following values:\n\n- \"None\"\n- \"Peer\"\n- \"Management\"\n\nIf you specify an escalation type other than None you must also specify an escalation delay. You cannot specify an `escalationType` value other than None for the first shift member.\n",
                    "type": "string",
                    "enum": [
                        "None",
                        "Peer",
                        "Management"
                    ]
                },
                "inRotation": {
                    "description": "This value is true if the member rotates according to the shift’s rotation rules and false if the member stays in the same position for each notification. If omitted, this value defaults to true.",
                    "type": "boolean"
                }
            },
            "required": [
                "recipient"
            ]
        },
        "RecipientPost": {
            "description": "A Recipient can be the target of a notification. Groups, People and Devices are all Recipients",
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier",
                    "type": "string"
                },
                "targetName": {
                    "type": "string"
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "GROUP",
                        "PERSON",
                        "DEVICE"
                    ]
                },
                "status": {
                    "description": "Whether the recipient is active. Inactive recipient cannot receive notifications. Use one of the following values:\n- \"ACTIVE\"\n- \"INACTIVE\"\n",
                    "type": "string",
                    "enum": [
                        "ACTIVE",
                        "INACTIVE"
                    ],
                    "default": "ACTIVE"
                },
                "externallyOwned": {
                    "type": "boolean"
                },
                "externalKey": {
                    "type": "string"
                }
            },
            "required": [
                "recipientType",
                "targetName"
            ],
            "discriminator": "recipientType"
        },
        "OnCallReminderConfigPost": {
            "description": "The configuration information for someone who wants to receive notifications for on-call reminders.",
            "type": "object",
            "properties": {
                "remindersEnabled": {
                    "type": "boolean",
                    "description": "True if the person wants to have reminders enabled, false if the person wants reminders disabled."
                },
                "remindOnShiftEnd": {
                    "type": "boolean",
                    "description": "True if the person wants to be notified when their shift ends, false if the person does not want to be notified."
                },
                "onCallReminderDeviceConfig": {
                    "type": "array",
                    "description": "A list of OnCallReminderDeviceConfig's.",
                    "items": {
                        "$ref": "#/definitions/OnCallReminderDeviceConfig"
                    }
                },
                "onCallReminderShiftStartConfig": {
                    "type": "array",
                    "description": "A list of OnCallReminderShiftStartConfig's.",
                    "items": {
                        "$ref": "#/definitions/OnCallReminderShiftStartConfig"
                    }
                }
            }
        },
        "PersonPost": {
            "description": "Someone in the xMatters system who can receive notifications is called a 'Person'. Every person in the xMatters system is a user defined by a set of details, including ID number, user name, login password, and so on.",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/RecipientPost"
                }
            ],
            "properties": {
                "firstName": {
                    "type": "string",
                    "description": "The first name of the person."
                },
                "language": {
                    "type": "string",
                    "description": "The person’s preferred language."
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the person."
                },
                "phoneLogin": {
                    "type": "string",
                    "description": "An access code that the person can use to identify themselves when they phone in to xMatters to retrieve messages."
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "PERSON"
                    ]
                },
                "roles": {
                    "type": "array",
                    "description": "An array of user roles. The roles correspond to the role names that are configured for your system. The following example shows how to assign the roles \"Standard User\", \"Group Supervisor\", and \"Person Supervisor\" to this person. \n`\"roles\":`\n`[\"Standard User\",`\n`\"Group Supervisor\",`\n`\"Person Supervisor\"]`\n",
                    "items": {
                        "type": "string"
                    }
                },
                "site": {
                    "$ref": "#/definitions/SiteLink"
                },
                "supervisors": {
                    "type": "array",
                    "description": "A list of unique identifiers that identify the person’s supervisors. The supervisors must have the role-based permissions required to supervise the user and the authenticating account must have permission to assign supervisors to the user.\nExample:\n`\"supervisors\":`\n`[\"481086d8-357a-4279-b7d5-d7dce48fcd12\",`\n`\"545686d8-3491-4a12-ddb7-a33239e82bc7\"]`\n",
                    "items": {
                        "$ref": "#/definitions/PersonLink"
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "The person’s time zone. \nExample:\nUS/Pacific\n"
                },
                "webLogin": {
                    "type": "string",
                    "description": "The identifier a person can use to log in to the web user interface. If this field is not defined, the webLogin is set to the `targetName`."
                }
            },
            "required": [
                "firstName",
                "lastName",
                "roles"
            ]
        },
        "GroupPost": {
            "description": "Groups are used for collecting users and devices and organizing them into notification schedules.",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/RecipientPost"
                }
            ],
            "properties": {
                "allowDuplicates": {
                    "type": "boolean",
                    "description": "True if recipients can receive more than one notification for the same event."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the group."
                },
                "observedByAll": {
                    "type": "boolean",
                    "description": "True if all roles can view and target this group. If this value is false, you must log on to the xMatters user interface and set the roles that can target the group; otherwise this group will not be visible."
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "GROUP"
                    ]
                },
                "site": {
                    "description": "The identifier of the site that the group uses for holidays.",
                    "$ref": "#/definitions/SiteLink"
                },
                "status": {
                    "type": "string",
                    "description": "Whether the group is active. Inactive groups cannot receive notifications. Use one of the following values:\n- \"ACTIVE\"\n- \"INACTIVE\"\n\nIf this value is not provided, the new group is set to “ACTIVE”.\n",
                    "enum": [
                        "ACTIVE",
                        "INACTIVE"
                    ]
                },
                "supervisors": {
                    "type": "array",
                    "description": "A list of identifiers of people that act as supervisors for this group. These users must have permission to supervise groups. If this value is not provided, the authenticating user becomes the group supervisor.",
                    "items": {
                        "$ref": "#/definitions/PersonLink"
                    }
                },
                "timezone": {
                    "type": "string"
                },
                "useDefaultDevices": {
                    "type": "boolean",
                    "description": "True if this group notifies users on their failsafe (default) devices if none of the member’s other devices are available."
                }
            }
        },
        "DevicePost": {
            "description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts.",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/RecipientPost"
                }
            ],
            "properties": {
                "recipientType": {
                    "type": "string",
                    "description": "For devices, the recipient type is \"DEVICE\". Providing this optional field allows xMatters to process your request more efficiently and improves performance.\"\n",
                    "enum": [
                        "DEVICE"
                    ]
                },
                "deviceType": {
                    "$ref": "#/definitions/DeviceType"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device. Device names are configured uniquely for each company, but typical values include the following:\n- \"Work Phone\"\n- \"Home Phone\"\n- \"Mobile Phone\"\n- \"Home Email\"\n- \"Work Email\"\n- \"SMS Phone\"\n- \"Pager\"\n- \"Fax\"\n"
                },
                "owner": {
                    "description": "The unique identifier of the user who owns this device. This corresponds to a user's `id` field.",
                    "$ref": "#/definitions/PersonLink"
                },
                "defaultDevice": {
                    "type": "boolean",
                    "description": "True if the device is a failsafe device."
                },
                "delay": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of minutes to wait for a response before contacting the next device."
                },
                "priorityThreshold": {
                    "type": "string",
                    "description": "The minimum priority of an event for it to be delivered to this device. Valid values include the following:\n- \"LOW\"\n- \"MEDIUM\"\n- \"HIGH\"\n",
                    "enum": [
                        "LOW",
                        "HIGH",
                        "MEDIUM"
                    ]
                },
                "sequence": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The order in which the device will be contacted, where 0 represents the first device contacted."
                },
                "testStatus": {
                    "type": "string",
                    "description": "Whether the device has been tested.",
                    "enum": [
                        "TESTED",
                        "UNTESTED",
                        "PENDING",
                        "INVALID"
                    ]
                },
                "provider": {
                    "$ref": "#/definitions/ProviderLink"
                },
                "timeframes": {
                    "type": "array",
                    "description": "A list of timeframes when xMatters may contact this device. (If the device is a failsafe device, it may be contacted outside these times in certain situations.)",
                    "items": {
                        "$ref": "#/definitions/DeviceTimeframe"
                    }
                }
            },
            "required": [
                "deviceType",
                "name",
                "owner"
            ],
            "discriminator": "deviceType"
        },
        "EmailDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "EMAIL"
                    ]
                },
                "emailAddress": {
                    "type": "string"
                }
            },
            "required": [
                "emailAddress"
            ]
        },
        "VoiceDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "VOICE"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "E.164 international format phone number including country code and extension"
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "SMSDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "TEXT_PHONE"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "E.164 international format phone number including country code and extension"
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "TextPagerDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "TEXT_PAGER"
                    ]
                },
                "pin": {
                    "type": "string"
                },
                "twoWayDevice": {
                    "type": "boolean"
                }
            },
            "required": [
                "pin",
                "twoWayDevice"
            ]
        },
        "NumericPagerDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "NUMERIC_PAGER"
                    ]
                },
                "pagerNumber": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "areaCode": {
                    "type": "string"
                },
                "pin": {
                    "type": "string"
                }
            }
        },
        "IMDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "IM"
                    ]
                },
                "address": {
                    "type": "string"
                }
            },
            "required": [
                "address"
            ]
        },
        "ApplePushDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "APPLE_PUSH"
                    ]
                },
                "accountId": {
                    "type": "string"
                },
                "apnToken": {
                    "type": "string"
                },
                "alertSound": {
                    "type": "string"
                },
                "soundStatus": {
                    "type": "string"
                },
                "soundThreshold": {
                    "type": "string",
                    "enum": [
                        "LOW",
                        "MEDIUM",
                        "HIGH"
                    ]
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "apnToken"
            ]
        },
        "AndroidPushDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "ANDROID_PUSH"
                    ]
                },
                "accountId": {
                    "type": "string"
                },
                "registrationId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "registrationId"
            ]
        },
        "BlackberryPushDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "BLACKBERRY_PUSH"
                    ]
                },
                "accountId": {
                    "type": "string"
                },
                "registrationId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "registrationId"
            ]
        },
        "FaxDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "FAX"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "pattern": "^\\d{5,20}$"
                },
                "country": {
                    "type": "string",
                    "enum": [
                        "AR",
                        "AU",
                        "BR",
                        "CA",
                        "FR",
                        "DE",
                        "HK",
                        "IN",
                        "IT",
                        "JP",
                        "PT",
                        "PR",
                        "GB",
                        "US"
                    ]
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "PublicAddressDevicePost": {
            "description": "a.k.a. Voice IVR",
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "VOICE_IVR"
                    ]
                },
                "phoneNumber": {
                    "type": "string",
                    "description": "E.164 international format phone number including country code and extension"
                }
            },
            "required": [
                "phoneNumber"
            ]
        },
        "GenericDevicePost": {
            "type": "object",
            "allOf": [
                {
                    "$ref": "#/definitions/DevicePost"
                }
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "GENERIC"
                    ]
                },
                "pin": {
                    "type": "string"
                }
            }
        },
        "PaginationLinks": {
            "properties": {
                "next": {
                    "type": "string",
                    "description": "A link to the next page of results"
                },
                "previous": {
                    "type": "string",
                    "description": "A link to the previous page of results"
                },
                "self": {
                    "type": "string",
                    "description": "A link to this page of results"
                }
            },
            "required": [
                "self"
            ]
        },
        "Pagination(Country)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/Country"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(Group)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/Group"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(GroupMember)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/GroupMember"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(GroupRoster)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/GroupRoster"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(Person)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/Person"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(Device)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/Device"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(DeviceName)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/DeviceName"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(DeviceType)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/DeviceType"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(DeviceTimeframe)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/DeviceTimeframe"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(FeatureToggle)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/FeatureToggle"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(OnCallReminderShiftStartConfig)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/OnCallReminderShiftStartConfig"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(OnCallReminderDeviceConfig)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/OnCallReminderDeviceConfig"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(ServiceProvider)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/ServiceProvider"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(Shift)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/Shift"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(ShiftOccurrence)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/ShiftOccurrence"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "Pagination(ShiftOccurrenceMember)": {
            "required": [
                "count",
                "data",
                "total",
                "links"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of items in this page of results (the number of items in the data array)."
                },
                "data": {
                    "type": "array",
                    "description": "An array that contains this page of resources.",
                    "items": {
                        "$ref": "#/definitions/ShiftOccurrenceMember"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The total number of items in the result set."
                },
                "links": {
                    "$ref": "#/definitions/PaginationLinks"
                }
            }
        },
        "PersonLink": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the resource."
                }
            }
        },
        "SiteLink": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the resource."
                }
            }
        },
        "RecipientLink": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "GROUP",
                        "PERSON",
                        "DEVICE"
                    ]
                }
            },
            "required": [
                "id",
                "recipientType"
            ]
        },
        "ProviderLink": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The name of the provider to use when sending notifications to this device. You do not need to include this value if there is only one provider configured for this type of device."
                }
            },
            "required": [
                "id"
            ]
        },
        "ReferenceLink": {
            "properties": {
                "self": {
                    "type": "string",
                    "description": "A link to this resource."
                }
            },
            "required": [
                "self"
            ]
        },
        "ProviderReference": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "required": [
                "id"
            ]
        },
        "ShiftReference": {
            "description": "This object defines a reference to a shift. If it is returned from a call to GET /calendar with `?embed=shift` it includes extra information about the shift such as its name and a reference to the group it belongs to.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the shift."
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the shift. This information is included in the response when `?embed=shifts` is used with GET /calendar."
                },
                "group": {
                    "$ref": "#/definitions/GroupReference"
                }
            },
            "required": [
                "id",
                "links"
            ]
        },
        "SiteReference": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the resource."
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "links"
            ]
        },
        "RecipientReference": {
            "description": "A reference to the group member. Group members can be people, devices, dynamic teams, or other groups.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the resource."
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "GROUP",
                        "PERSON",
                        "DEVICE"
                    ]
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "recipientType",
                "links"
            ]
        },
        "PersonReference": {
            "description": "Refers to a person in xMatters.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the person."
                },
                "targetName": {
                    "type": "string",
                    "description": "The user id of the person."
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "targetName",
                "links"
            ]
        },
        "DeviceReference": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the resource."
                },
                "targetName": {
                    "type": "string",
                    "description": "The target name of the resource."
                },
                "recipientType": {
                    "type": "string",
                    "enum": [
                        "DEVICE"
                    ]
                },
                "deviceType": {
                    "$ref": "#/definitions/DeviceType"
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "targetName",
                "recipientType",
                "deviceType",
                "links"
            ]
        },
        "GroupReference": {
            "description": "A reference to a group, including a link that can be used to access the group using this API.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the group."
                },
                "targetName": {
                    "type": "string",
                    "description": "The name of the group."
                },
                "links": {
                    "$ref": "#/definitions/ReferenceLink"
                }
            },
            "required": [
                "id",
                "targetName",
                "links"
            ]
        },
        "Role": {
            "description": "Refers to a role in xMatters.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the role."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role."
                }
            },
            "required": [
                "id",
                "name"
            ]
        },
        "BadRequestResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The http response code.",
                    "enum": [
                        400
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A detailed description of the response or error."
                },
                "reason": {
                    "type": "string",
                    "description": "A description of the response code.",
                    "enum": [
                        "Bad Request"
                    ]
                }
            },
            "required": [
                "code",
                "message",
                "reason"
            ]
        },
        "UnauthorizedResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The http response code.",
                    "enum": [
                        401
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A detailed description of the response or error."
                },
                "reason": {
                    "type": "string",
                    "description": "A description of the response code.",
                    "enum": [
                        "Unauthorized"
                    ]
                }
            },
            "required": [
                "code",
                "message",
                "reason"
            ]
        },
        "ForbiddenResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The http response code.",
                    "enum": [
                        403
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A detailed description of the response or error."
                },
                "reason": {
                    "type": "string",
                    "description": "A description of the response code.",
                    "enum": [
                        "Forbidden"
                    ]
                }
            },
            "required": [
                "code",
                "message",
                "reason"
            ]
        },
        "NotFoundResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The http response code.",
                    "enum": [
                        404
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A detailed description of the response or error."
                },
                "reason": {
                    "type": "string",
                    "description": "A description of the response code.",
                    "enum": [
                        "Not Found"
                    ]
                }
            },
            "required": [
                "code",
                "message",
                "reason"
            ]
        },
        "ConflictResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The http response code.",
                    "enum": [
                        409
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A detailed description of the response or error."
                },
                "reason": {
                    "type": "string",
                    "description": "A description of the response code.",
                    "enum": [
                        "Conflict"
                    ]
                }
            },
            "required": [
                "code",
                "message",
                "reason"
            ]
        }
    },
    "parameters": {
        "path-deviceId": {
            "name": "deviceId",
            "in": "path",
            "description": "The unique identifier or target name of the device. The target name of a device is the user name, followed by the | (pipe) character, followed by the device name.\nExamples:\n  - 254c95ee-4abe-47ea-ae7c-ae84fb4bee4f\n  - mmcbride|Work Phone\n",
            "required": true,
            "type": "string"
        },
        "path-groupId": {
            "name": "groupId",
            "in": "path",
            "description": "The unique identifier (`id`) or name (`targetName`) of the group. Group names must be URL-encoded.\n\nExample: `Oracle%20Administrators`\nExample: `438e9245-b32d-445f-916bd3e07932c892`\n",
            "required": true,
            "type": "string"
        },
        "path-memberId": {
            "name": "memberId",
            "in": "path",
            "description": "The unique identifier (`id`) or name (`targetName`) of the member to remove.\nExample:`mmcbride`\nExample:`62b08afe-2234-48a4-ece4-e157b049e290`\n",
            "required": true,
            "type": "string"
        },
        "path-personId": {
            "name": "personId",
            "in": "path",
            "description": "The unique identifier (`id`) or name (`targetName`) of the person. \nExample:`mmcbride`\nExample:`b2341d69-8b83-4660-b8c8-f2e728f675f9`\n",
            "required": true,
            "type": "string"
        },
        "path-shiftId": {
            "name": "shiftId",
            "in": "path",
            "description": "The `id` or `targetName` of the shift (must be URL encoded).\nExample:`24x7`\nExample:`8a63013a-870c-4f02-8afc-c174a235318d`\n",
            "required": true,
            "type": "string"
        },
        "path-siteId": {
            "name": "siteId",
            "in": "path",
            "description": "The unique identifier (`id`) or name (`targetName`) of the site.\n\nExample:`San Ramon`\nExample:`960ffa54-b6d3-42b7-8025-7d95ff599976`\n",
            "required": true,
            "type": "string"
        },
        "query-personId": {
            "name": "personId",
            "in": "query",
            "description": "The person's uuid or targetName",
            "required": false,
            "type": "string"
        },
        "query-groupId": {
            "name": "groupId",
            "in": "query",
            "description": "The group's uuid or targetName",
            "required": false,
            "type": "string"
        },
        "query-embed": {
            "name": "embed",
            "in": "query",
            "description": "Comma separated list of linked domain entities to embed in the response",
            "required": false,
            "type": "string"
        },
        "query-embed-getDevice": {
            "name": "embed",
            "in": "query",
            "description": "Use `?embed=timeframes` to include the timeframes that each device is scheduled to receive notifications.\nExample:\n- `/devices/254c95ee-4abe-47ea-ae7c-ae84fb4bee4f?embed=timeframes`\n",
            "required": false,
            "type": "string"
        },
        "query-embed-whoIsOnDuty": {
            "name": "embed",
            "in": "query",
            "description": "A list of extra information to embed in the response. These values must be separated by the `,` (comma) character. The following options are available:\n\n- shift: ShiftReference objects are enhanced to inlcude the following fields.\n  - `name`\n  - `group`\n- members.owner: Device members include enhanced information about the device’s `owner` in the owner object, including the following fields:\n  - `targetName`\n  - `firstName`\n  - `lastName`\n  - `language`\n  - `timezone`\n  - `webLogin`\nExample:`/groups/{groupID}?embed=shift,members.owner`\n",
            "required": false,
            "type": "string"
        },
        "query-embed-getGroupMembers": {
            "name": "embed",
            "in": "query",
            "description": "Use the `?embed=shifts` query parameter to include shift information in the response.\nExample: `groups/IT/members?embed=shifts`\n",
            "required": false,
            "type": "string"
        },
        "query-embed-getPerson": {
            "name": "embed",
            "in": "query",
            "description": "Use `embed=roles` to include a list of the person’s roles in the result.",
            "required": false,
            "type": "string"
        },
        "query-embed-getPersonDevices": {
            "name": "embed",
            "in": "query",
            "description": "Use `?embed=timeframes` include a list of Device timeframes objects that represent when the devices are configured to receive notifications.\nExample: GET /people/{personID}/devices?embed=timeframes\n",
            "required": false,
            "type": "string"
        },
        "query-embed-getPeople": {
            "name": "embed",
            "in": "query",
            "description": "Use `embed=roles` to include a list of each person’s roles in the result.",
            "required": false,
            "type": "string"
        },
        "query-limit": {
            "name": "limit",
            "in": "query",
            "description": "The number of items to return. Use with the `offset` parameter to return a single page of results. For more information about working with paginated result sets, see Pagination.",
            "required": false,
            "type": "integer",
            "default": 100,
            "maximum": 1000
        },
        "query-offset": {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip before returning results. Use with the `limit` parameter to return a single page of results. For more information about working with paginated result sets, see Pagination.",
            "required": false,
            "type": "integer",
            "default": 0
        },
        "query-at": {
            "name": "at",
            "in": "query",
            "description": "At this time",
            "required": false,
            "type": "string",
            "format": "date-time"
        },
        "query-from": {
            "name": "from",
            "in": "query",
            "description": "From this time",
            "required": false,
            "type": "string",
            "format": "date-time"
        },
        "query-to": {
            "name": "to",
            "in": "query",
            "description": "To this time",
            "required": false,
            "type": "string",
            "format": "date-time"
        },
        "query-status": {
            "name": "status",
            "in": "query",
            "description": "ACTIVE or INACTIVE",
            "required": false,
            "type": "string",
            "enum": [
                "ACTIVE",
                "INACTIVE"
            ]
        },
        "query-deviceType": {
            "name": "deviceType",
            "in": "query",
            "description": "Device type",
            "required": false,
            "type": "string",
            "enum": [
                "ANDROID_PUSH",
                "APPLE_PUSH",
                "BLACKBERRY_PUSH",
                "BROWSER",
                "EMAIL",
                "FAX",
                "GENERIC",
                "IM",
                "NUMERIC_PAGER",
                "TEXT_PAGER",
                "TEXT_PHONE",
                "VOICE",
                "VOICE_IVR"
            ]
        }
    },
    "responses": {
        "204": {
            "description": "No Content"
        },
        "400": {
            "description": "Bad Request - The request is malformed",
            "schema": {
                "$ref": "#/definitions/BadRequestResponse"
            }
        },
        "401": {
            "description": "Unauthorized - The action cannot be performed in the system",
            "schema": {
                "$ref": "#/definitions/UnauthorizedResponse"
            }
        },
        "403": {
            "description": "Forbidden - The authenticated user does not have permission to perform this action",
            "schema": {
                "$ref": "#/definitions/ForbiddenResponse"
            }
        },
        "404": {
            "description": "Not Found - The resource does not exist",
            "schema": {
                "$ref": "#/definitions/NotFoundResponse"
            }
        },
        "409": {
            "description": "Conflict - The action cannot be performed in the system",
            "schema": {
                "$ref": "#/definitions/ConflictResponse"
            }
        }
    }
}
